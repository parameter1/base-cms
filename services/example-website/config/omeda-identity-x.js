const { get, getAsArray } = require('@parameter1/base-cms-object-path');
const { getOmedaCustomerRecord } = require('@parameter1/base-cms-marko-web-omeda-identity-x/omeda-data');

const idxConfig = require('./identity-x');
const omedaConfig = require('./omeda');

module.exports = {
  clientKey: omedaConfig.clientKey,
  brandKey: omedaConfig.brandKey,
  appId: omedaConfig.appId,
  inputId: omedaConfig.inputId,
  rapidIdentProductId: get(omedaConfig, 'rapidIdentification.productId'),
  idxConfig,

  /**
   * Behavior config is now mandatory and can be generated by the CLI.
   * @see https://github.com/parameter1/identity-x-omeda-cli
   *  */
  behaviors: {
    logIn: 9,
    verifyEmail: 11,
    submitProfile: 10,
  },
  behaviorAttributes: {
    website: {
      id: 7,
      valueId: 21146,
    },
    actionSource: {
      id: 6,
      valueIds: {
        default: 21141,
        newsletterSignup: 21143,
        comments: 21145,
        contentGate: 21139,
      },
    },
    newsletterSignupType: {
      id: 4,
      valueIds: {
        default: 21138,
        pushdown: 21136,
        inlineContent: 21144,
        inlineSection: 21142,
        footer: 21134,
      },
    },
    contentGateType: {
      id: 5,
      valueIds: {
        default: 21135,
        metered: 21137,
        printPreview: 21140,
      },
    },
  },

  /**
   * IdentityX hook customization
   *
   * If present, the specified behavior, demographic, and/or promo code will be used/appended when
   * handling the relevant IdentityX hook event.
   */
  // appendBehaviorToHook: [
  //   {
  //     hook: 'onLoginLinkSent',
  //     behaviorId: 6232,
  //   },
  //   {
  //     hook: 'onAuthenticationSuccess',
  //     behaviorId: 6231,
  //   },
  //   {
  //     hook: 'onUserProfileUpdate',
  //     behaviorId: 6233,
  //   },
  // ],

  // appendDemographicToHook: [
  //   {
  //     hook: 'onLoginLinkSent',
  //     demographicId: 5081074, // Email Authorization Status
  //     valueIds: [5104240], // Submitted
  //   },
  //   {
  //     hook: 'onAuthenticationSuccess',
  //     demographicId: 5081074,
  //     valueIds: [5104240, 5104239], // Submitted, Verified
  //   },
  //   {
  //     hook: 'onUserProfileUpdate',
  //     demographicId: 5081074,
  //     valueIds: [5104240, 5104239, 5104238], // Submitted, Verified, Full Profile
  //   },
  // ],

  appendPromoCodeToHook: [
    {
      hook: 'onLoginLinkSent',
      promoCode: 'P1Login',
    },
    {
      hook: 'onAuthenticationSuccess',
      promoCode: 'P1Verified',
    },
    {
      hook: 'onUserProfileUpdate',
      promoCode: 'P1FullProfile',
    },
  ],

  onLoginLinkSentFormatter: (async ({ req, payload }) => {
    // const identityXOptInHooks = req.app.locals.site.getAsObject('identityXOptInHooks');
    const omeda = req.app.locals.site.getAsObject('omeda');
    const { user } = payload;

    const found = getAsArray(user, 'externalIds')
      .find(({ identifier, namespace }) => identifier.type === 'encrypted'
        && namespace.provider === 'omeda'
        && namespace.tenant === omeda.brandKey);

    // BAIL if no encryptedCustomerId and return payload
    if (!found) return payload;
    const encryptedCustomerId = get(found, 'identifier.value');

    // Retrive the omeda customer
    const omedaCustomer = await getOmedaCustomerRecord({
      omedaGraphQLClient: req.$omedaGraphQLClient,
      encryptedCustomerId,
    });
    const subscriptions = getAsArray(omedaCustomer, 'subscriptions');
    const hasWebsiteSubscription = subscriptions.find(({ product }) => product.type.id === 'WEBSITE' && product.id === get(omedaConfig, 'rapidIdentification.productId'));
    // If the user already has the website product do
    // return payload with registration_meter promo code ref removed
    if (hasWebsiteSubscription && (payload.promoCode || payload.appendPromoCodes.length)) {
      const promoCode = !payload.promoCode.includes('registration_meter') ? payload.promoCode : undefined;
      const appendPromoCodes = payload.appendPromoCodes.filter(code => !code.includes('registration_meter'));
      console.log(payload, { ...payload, promoCode, appendPromoCodes });
      return {
        ...payload,
        promoCode,
        appendPromoCodes,
      };
    }
    return payload;
  }),
  onAuthenticationSuccessFormatter: (async ({ payload }) => ({ ...payload, promoCode: 'ExampleWebsiteOnAuthSuccessPromo' })),
  onUserProfileUpdateFormatter: (async ({ req, payload }) => {
    // BAIL if omedaGraphQLCLient isnt available return payload.
    if (!req.$omedaGraphQLClient) return payload;

    const idxOnProductHooks = req.app.locals.site.getAsObject('idxOnProductHooks');
    const omeda = req.app.locals.site.getAsObject('omeda');
    if (idxOnProductHooks.onUserProfileUpdate) {
      const { productIds, promoCode } = idxOnProductHooks.onUserProfileUpdate;
      const { user } = payload;
      const found = getAsArray(user, 'externalIds')
        .find(({ identifier, namespace }) => identifier.type === 'encrypted'
          && namespace.provider === 'omeda'
          && namespace.tenant === omeda.brandKey);
      // BAIL if no encryptedCustomerId and return payload
      if (!found) return payload;
      const encryptedCustomerId = get(found, 'identifier.value');

      // Retrive the omeda customer
      const omedaCustomer = await getOmedaCustomerRecord({
        omedaGraphQLClient: req.$omedaGraphQLClient,
        encryptedCustomerId,
      });
      // Get the current user subscriptions
      const subscriptions = getAsArray(omedaCustomer, 'subscriptions');
      // For each autoOptinProduct check if they have a subscription.
      // Sign the user up if they do not
      const newSubscriptions = productIds.filter(
        id => !subscriptions.some(({ product }) => product.deploymentTypeId === id),
      );
      if (newSubscriptions) {
        const deploymentTypeIds = payload.deploymentTypeIds
          ? [...payload.deploymentTypeIds, ...newSubscriptions]
          : [...newSubscriptions];
        return ({
          ...payload,
          deploymentTypeIds,
          appendPromoCodes: [
            promoCode,
          ],
        });
      }
    }
    return payload;
  }),

  /**
   * Customize Omeda+IdentityX payload
   */
  // onAuthenticationSuccessFormatter: async payload => ({
  //   ...payload,
  //   // productIds: [33],
  //   promoCode: 'onAuthenticationSuccessWithFormatter',
  // }),
};
